<style>
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }
    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        width: 100%;
    }
    .game-board { width: 100%; height: 100vh; background-color: white;}
    .room-rectangle {
        background-color: lightblue;
        width: 100%;
        height: 40px;
        font-size: x-large;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        margin-bottom: 10px;
    }
    .room-rectangle2 {
        background-color: rgb(93, 223, 235);
        width: 100%;
        height: 40px;
        font-size: x-large;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        margin-bottom: 10px;
    }
    .dropdown-item {
        padding: 10px;
        background-color: lightgray;
        cursor: pointer;
        border-bottom: 1px solid black;
    }
    .dropdown-item:hover {
        background-color: gray;
        color: white;
    }
    .dropdown-menu {
        display: block;
        position: absolute;
        top: 150%;
        height: 800%;
        left: 0;
        background-color: white;
        border: 1px solid #ccc;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        z-index: 1000;
    }
    .counter-container {
        font-size: x-large;
        background: #eee;
        padding: 10px 20px;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        max-width: 100px;
        width: 100%;
    }
    .icon {
        font-size: clamp(1.5rem, 5vw, 3rem);
        line-height: 1;
    }
    .number {
        font-size: clamp(1rem, 4vw, 2rem);
        line-height: 1;
    }
    .subdiv-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 20px;
    }

    .wrongsubdiv, .correctsubdiv {
        flex: 1 1 120px; /* Flexible, shrinks to 120px */
        color: white;
        border-radius: 8px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: large;
        word-break: break-word; /* Helps if the text is too long */
    }

    .wrongsubdiv {
        background-color: rgb(242, 80, 80);
    }

    .correctsubdiv {
        background-color: rgb(17, 233, 17);
    }
</style>

<div class="game-board" id="game-board">
    <div style="display: flex; height: 100%; padding: 20px;">
        <div style="padding-top: 50px; padding-right: 30px; flex: 1; display: flex; flex-direction: column; justify-content: flex-start; gap: 10px;">
            <div id="guessed">
                <div class="room-rectangle">
                    @Model[@ViewBag.Start].Title
                </div>
            </div>
            <div class="room-rectangle2" id="middle-rectangle">
                ...
            </div>
            <div class="room-rectangle">
                @Model[@ViewBag.End].Title
            </div>
            <div style="position: relative; width: 80%; margin: 0 auto;">
                <div style="display: flex; justify-content: center; align-items: center; gap: 10px;">
                    <input id="guess-input" oninput="filterRooms()" style="flex: 1; height: 50px; padding: 5px;">
                    <button onclick="guess()" style="height: 50px; background-color: green; color: white; border: none; border-radius: 5px; padding: 0 10px;">H√ÅDEJ</button>
                </div>

                <div id="room-dropdown" class="dropdown-menu"></div>
            </div>
        </div>
        <div style="padding-top: 50px;">
            <div style="flex: 1; display: flex; align-items: flex-start; justify-content: flex-end;">
                <div class="counter-container">
                    <span class="icon">‚ùå</span>
                    <span class="number" id="mistake-counter">0</span>
                </div>
                <div class="counter-container">
                    <span class="icon">‚ùì</span>
                    <span class="number" id="hint-counter">0</span>
                </div>
                <div class="counter-container">
                    <span class="icon">‚Ü©Ô∏è</span>
                    <span class="number" id="undo-counter">0</span>
                </div>
            </div>
            <div class="subdiv-container">
                <div id="blok" class="wrongsubdiv">
                    @Model[@ViewBag.Start].Blok
                </div>
                <div id="okrsek" class="wrongsubdiv">
                    @Model[@ViewBag.Start].Okrsek
                </div>
                <div id="ctvrt" class="wrongsubdiv">
                    @Model[@ViewBag.Start].Ctvrt
                </div>
                <div id="cast" class="wrongsubdiv">
                    @Model[@ViewBag.Start].Cast
                </div>
            </div>
            <div style="display: gap: 10px; margin-top: 20px;">
                <button onclick="undo()" style="height: 50px; min-width: 150px; padding: 0 20px; margin-right: 10px; background-color: #1976d2; color: white; border: none; border-radius: 8px; font-size: large; font-weight: 500; cursor: pointer;">
                    ZPƒöT
                </button>
                <button onclick="hint()" style="height: 50px; min-width: 150px; padding: 0 20px; background-color: #43a047; color: white; border: none; border-radius: 8px; font-size: large; font-weight: 500; cursor: pointer;">
                    N√ÅPOVƒöDA
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    var rooms = @Html.Raw(Json.Serialize(Model));
    var alreadyguessed = ["@ViewBag.Start"];
    var guesses = ["@ViewBag.Start"];
    var goal = "@ViewBag.End";
    var selectedKey = "";
    var mistakes = 0;
    var hints = 0;
    var undos = 0;
    var hintenabled = false;
    var path = @Html.Raw(Json.Serialize(ViewBag.ShortestPath));
    
    function undo() {
        console.log(path);
        var board = document.getElementById('guessed');
        if (board.children.length > 1) {
            board.removeChild(board.lastElementChild);
            guesses.pop();
            alreadyguessed = [guesses[guesses.length - 1]];
            updateSubdivs(guesses[guesses.length - 1]);
            undos++;
            document.getElementById("undo-counter").innerText = undos;
            hintenabled = false;
            filterRooms();
        }
    }

    function hint() {
        if (hintenabled == true){
            return;
        }
        hintenabled = true;
        hints++;
        var hintcount = document.getElementById("hint-counter");
        hintcount.innerText = hints;
        filterRooms();
    }

    function guess() {
        var arg = selectedKey;
        if (!(arg in rooms)) {
            return;
        }
        var lastGuess = guesses[guesses.length - 1];
        if (rooms[lastGuess].bordering_rooms && rooms[lastGuess].bordering_rooms.includes(arg)) {
            guesses.push(arg);
            var board = document.getElementById('guessed');
            var newDiv = document.createElement('div');
            newDiv.className = 'room-rectangle';
            newDiv.textContent = rooms[arg].title || '';
            board.appendChild(newDiv);
            alreadyguessed = [arg];
            var input = document.getElementById("guess-input");
            input.value = "";
            hintenabled = false;
            filterRooms();
            updateSubdivs(arg);
            if (rooms[arg].bordering_rooms.includes(goal)){
                document.getElementById("middle-rectangle")?.remove();
                win();
            }
        }
        else{
            mistakes += 1;
            alreadyguessed.push(arg);
            filterRooms();
            var mistakescount = document.getElementById("mistake-counter");
            mistakescount.innerText = mistakes;
        }
    }
    
    function win(){
        var floatingDiv = document.createElement('div');
        floatingDiv.style.position = 'fixed';
        floatingDiv.style.top = '50%';
        floatingDiv.style.left = '50%';
        floatingDiv.style.transform = 'translate(-50%, -50%)';
        floatingDiv.style.background = 'rgba(255,255,255,0.98)';
        floatingDiv.style.border = '4px solid #1976d2';
        floatingDiv.style.borderRadius = '24px';
        floatingDiv.style.boxShadow = '0 8px 32px rgba(0,0,0,0.25)';
        floatingDiv.style.zIndex = '2000';
        floatingDiv.style.padding = '60px 80px';
        floatingDiv.style.fontSize = '2.5rem';
        floatingDiv.style.fontWeight = 'bold';
        floatingDiv.style.textAlign = 'center';
        floatingDiv.innerText = 'V√Ωhra';

        var guessesLabel = document.createElement('div');
        guessesLabel.style.fontSize = '1.3rem';
        guessesLabel.style.marginTop = '30px';
        guessesLabel.innerText = 'üìù' + guesses.length;
        floatingDiv.appendChild(guessesLabel);

        var mistakesLabel = document.createElement('div');
        mistakesLabel.style.fontSize = '1.1rem';
        mistakesLabel.innerText = '‚ùå' + mistakes;
        floatingDiv.appendChild(mistakesLabel);

        var hintsLabel = document.createElement('div');
        hintsLabel.style.fontSize = '1.1rem';
        hintsLabel.innerText = '‚ùì' + hints;
        floatingDiv.appendChild(hintsLabel);

        var undosLabel = document.createElement('div');
        undosLabel.style.fontSize = '1.1rem';
        undosLabel.innerText = '‚Ü©Ô∏è' + undos;
        floatingDiv.appendChild(undosLabel);

        floatingDiv.appendChild(document.createElement('br'));

        var yourguesses = "";
        for(let room in guesses){
            yourguesses += rooms[guesses[room]].title + " > ";
        }
        yourguesses += rooms[goal].title;

        var bestguesses = "";
        for (let i = path.length-1; i >= 0; i--) {
            bestguesses += rooms[path[i]].title + " > ";
        }

        var guessesLabel = document.createElement('div');
        guessesLabel.style.fontSize = '1.1rem';
        guessesLabel.style.background = 'linear-gradient(90deg, #ff5858 0%, #f857a6 100%)';
        guessesLabel.style.color = 'white';
        guessesLabel.style.borderRadius = '8px';
        guessesLabel.style.padding = '8px 16px';
        guessesLabel.innerText = "TVOJE ≈òE≈†EN√ç" + "\n" + yourguesses + "\n" + "\n" + "SPR√ÅVN√â ≈òE≈†EN√ç" + "\n" + bestguesses;
        floatingDiv.appendChild(guessesLabel);

        var score = (path.length/(guesses.length+1+mistakes*0.5+hints*2.5+undos*0.5))*100;

        var copyBtn = document.createElement('button');
        copyBtn.innerText = 'Kop√≠rovat';
        copyBtn.style.marginTop = '20px';
        copyBtn.style.fontSize = '1.2rem';
        copyBtn.style.padding = '8px 24px';
        copyBtn.style.background = '#43a047';
        copyBtn.style.color = 'white';
        copyBtn.style.border = 'none';
        copyBtn.style.borderRadius = '8px';
        copyBtn.style.cursor = 'pointer';
        copyBtn.onclick = function() {
            navigator.clipboard.writeText("Kroky: ||" + guesses.length + "||\nChyby: ||" + mistakes + "||\nN√°povƒõdy: ||" + hints + "||\nZpƒõt: ||" + undos + "||\nCesta: ||" + yourguesses + "||\nScore: ||" + score + "||\nPlay on: https://parezwiki.onrender.com/Game/Parezle");
        };
        floatingDiv.appendChild(document.createElement('br'));
        floatingDiv.appendChild(copyBtn);

        var closeBtn = document.createElement('button');
        closeBtn.innerText = 'Zav≈ô√≠t';
        closeBtn.style.marginTop = '40px';
        closeBtn.style.fontSize = '1.5rem';
        closeBtn.style.padding = '10px 30px';
        closeBtn.style.background = '#1976d2';
        closeBtn.style.color = 'white';
        closeBtn.style.border = 'none';
        closeBtn.style.borderRadius = '8px';
        closeBtn.style.cursor = 'pointer';
        closeBtn.onclick = function() {
            floatingDiv.remove();
        };
        floatingDiv.appendChild(document.createElement('br'));
        floatingDiv.appendChild(closeBtn);
        document.getElementById('game-board').appendChild(floatingDiv);
    }

    function updateSubdivs(last) {
        var blok = document.getElementById("blok");
        var okrsek = document.getElementById("okrsek");
        var ctvrt = document.getElementById("ctvrt");
        var cast = document.getElementById("cast");
        blok.textContent = rooms[last].blok;
        blok.className = "wrongsubdiv";
        okrsek.textContent = rooms[last].okrsek;
        okrsek.className = "wrongsubdiv";
        ctvrt.textContent = rooms[last].ctvrt;
        ctvrt.className = "wrongsubdiv";
        cast.textContent = rooms[last].cast;
        cast.className = "wrongsubdiv";
        if (rooms[last].blok == rooms[goal].blok){
            blok.className = "correctsubdiv";
        }
        if (rooms[last].okrsek == rooms[goal].okrsek){
            okrsek.className = "correctsubdiv";
        }
        if (rooms[last].ctvrt == rooms[goal].ctvrt){
            ctvrt.className = "correctsubdiv";
        }
        if (rooms[last].cast == rooms[goal].cast){
            cast.className = "correctsubdiv";
        }
    }

    document.addEventListener("DOMContentLoaded", function() {
        updateSubdivs("@ViewBag.Start");
    });

    function filterRooms() {
        arg = document.getElementById('guess-input').value;
        let normalized = arg.toLowerCase()
            .replace(/[\s\-\,\.]/g, '')
            .normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        var dropdown = document.getElementById('room-dropdown');
        var lastGuess = guesses[guesses.length - 1];
        dropdown.innerHTML = '';
        if (normalized.length === 0 && !hintenabled) {
            return;
        }
        for (let key in rooms) {
            let title = rooms[key].title || '';
            let normalizedTitle = title.toLowerCase()
                .replace(/[\s\-\,\.]/g, '')
                .normalize('NFD').replace(/[\u0300-\u036f]/g, '');
            if (normalizedTitle.startsWith(normalized) && !alreadyguessed.includes(key)) { 
                if(!hintenabled || hintenabled && rooms[lastGuess].bordering_rooms.includes(key)){
                    var newDiv = document.createElement('div');
                    newDiv.onclick = function() { choose(key); };
                    newDiv.textContent = title;
                    newDiv.value = key;
                    newDiv.className = 'dropdown-item';
                    dropdown.appendChild(newDiv);
                }
            }
        }
    }
    function choose(key){
        var input = document.getElementById("guess-input");
        selectedKey = key;
        input.value = rooms[key].title;
    }
</script>